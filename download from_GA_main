#!/usr/bin/env python
# coding: utf-8

# In[174]:


import numpy as np
import pandas as pd
from apiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
import csv
from sqlalchemy import create_engine
import datetime


# In[4]:


def format_summary(response):
    try:
        # create row index
        try: 
            row_index_names = response['reports'][0]['columnHeader']['dimensions']
            row_index = [ element['dimensions'] for element in response['reports'][0]['data']['rows'] ]
            row_index_named = pd.MultiIndex.from_arrays(np.transpose(np.array(row_index)), 
                                                        names = np.array(row_index_names))
        except:
            row_index_named = None
        
        # extract column names
        summary_column_names = [item['name'] for item in response['reports'][0]
                                ['columnHeader']['metricHeader']['metricHeaderEntries']]
    
        # extract table values
        summary_values = [element['metrics'][0]['values'] for element in response['reports'][0]['data']['rows']]
    
        # combine. I used type 'float' because default is object, and as far as I know, all values are numeric
        df = pd.DataFrame(data = np.array(summary_values), 
                          index = row_index_named, 
                          columns = summary_column_names).astype('float')
    
    except:
        df = pd.DataFrame()
        
    return df

def format_pivot(response):
    try:
        # extract table values
        pivot_values = [item['metrics'][0]['pivotValueRegions'][0]['values'] for item in response['reports'][0]
                        ['data']['rows']]
        
        # create column index
        top_header = [item['dimensionValues'] for item in response['reports'][0]
                      ['columnHeader']['metricHeader']['pivotHeaders'][0]['pivotHeaderEntries']]
        column_metrics = [item['metric']['name'] for item in response['reports'][0]
                          ['columnHeader']['metricHeader']['pivotHeaders'][0]['pivotHeaderEntries']]
        array = np.concatenate((np.array(top_header),
                                np.array(column_metrics).reshape((len(column_metrics),1))), 
                               axis = 1)
        column_index = pd.MultiIndex.from_arrays(np.transpose(array))
        
        # create row index
        try:
            row_index_names = response['reports'][0]['columnHeader']['dimensions']
            row_index = [ element['dimensions'] for element in response['reports'][0]['data']['rows'] ]
            row_index_named = pd.MultiIndex.from_arrays(np.transpose(np.array(row_index)), 
                                                        names = np.array(row_index_names))
        except: 
            row_index_named = None
        # combine into a dataframe
        df = pd.DataFrame(data = np.array(pivot_values), 
                          index = row_index_named, 
                          columns = column_index).astype('float')
    except:
        df = pd.DataFrame()
    return df

def format_report(response):
    summary = format_summary(response)
    pivot = format_pivot(response)
    if pivot.columns.nlevels == 2:
        summary.columns = [['']*len(summary.columns), summary.columns]
    
    return(pd.concat([summary, pivot], axis = 1))

def run_report(body, credentials_file):
    #Create service credentials
    credentials = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, 
                                scopes = ['https://www.googleapis.com/auth/analytics.readonly'])
    
    #Create a service object
    service = build('analyticsreporting', 'v4', credentials=credentials)
    
    #Get GA data
    response = service.reports().batchGet(body=body).execute()
    
    return(format_report(response))




# In[175]:


your_view_id = '181529865'
ga_keys = 'pelagic-bonbon-323206-abdddd4fbdcc.json'
yesterday = datetime.date.fromordinal(datetime.date.today().toordinal()-1).strftime("%Y-%m-%d")


# In[176]:


body = {'reportRequests': [{'viewId': your_view_id, 
                            'dateRanges': [{'startDate': yesterday, 'endDate': yesterday }],
                              'dimensions':[{'name':'ga:adContent'},
                                            {'name': 'ga:Campaign'},
                                            {'name':  'ga:date' },
                                            {'name':  'ga:Keyword'},
                                            {'name':  'ga:Medium'},
                                            {'name':  'ga:Source'}
                                           ],
                               'metrics': [
                                            {'expression':'ga:adClicks'},
                                            {'expression':'ga:adCost'},
                                            {'expression':'ga:Impressions'} 
                                          ],
                              'pageSize': 100000
                          }
                          ]}


# In[169]:


report = run_report(body, ga_keys).reset_index() # index is turned into columns to help with visualization
report


# In[170]:


df = pd.DataFrame(report)


# In[171]:


df=df.rename(columns={'ga:adContent':'Content','ga:Campaign':'Campaign','ga:date':'date','ga:Keyword':'Keyword','ga:Medium':'Medium','ga:Source':'Source','ga:adClicks':'Clicks','ga:adCost':'Cost','ga:Impressions':'Impressions'})
df['date']=pd.to_datetime(df['date'],format='%Y-%m-%d')


# In[172]:



engine = create_engine('postgresql://Timur:JbkdjfhyeWies@109.71.14.64:25900/analytic')
df.to_sql('ga_report', engine, if_exists='append')

